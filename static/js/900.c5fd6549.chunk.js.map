{"version":3,"file":"static/js/900.c5fd6549.chunk.js","mappings":"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","sources":["components/Contacts/Avatars.js","components/Contacts/ContactListItem.js","components/Contacts/AddContact.js","components/Contacts/FindContact.js","components/Contacts/ContactList.js"],"sourcesContent":["import React from \"react\";\nimport Avatar from \"react-avatar\";\n\nfunction Avatars() {\n  \n  return (\n    <Avatar\n      name=\"John Doe\" \n      size=\"100\" \n      round={true} \n      textSizeRatio={2} \n      style={{ width: \"100px\", height: \"100px\" }}\n    />\n  );\n}\n\nexport default Avatars;\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Avatars from \"./Avatars\";\nimport { connect } from \"react-redux\";\nimport { removeContact } from \"../../redux/contacts/contactsOperations\";\n\nfunction ContactListItem({ contact, removeContact }) {\n  return (\n    <Card\n      className=\"col mb-5\"\n      border=\"primary\"\n      style={{ width: \"18rem\", margin: \"10px\", flex: \"0 0 80%\" }}\n    >\n      <Avatars />\n      <Card.Body>\n        <Card.Title>{contact.name}</Card.Title>\n        <Card.Text>Email: test@email.com</Card.Text>\n        <Card.Text>Number: {contact.number}</Card.Text>\n        <Button\n          variant=\"primary\"\n          type=\"button\"\n          id={contact.id}\n          onClick={(e) => removeContact(e.target.id)}\n        >\n          Delete contact\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nconst mapDispatchToProps = {\n  removeContact,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactListItem);","import React, { Component } from \"react\";\nimport {\n  Form,\n  Button,\n  Container,\n  Row,\n  Col,\n  Accordion,\n  Card,\n} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { connect } from \"react-redux\";\nimport { addUserContact } from \"../../redux/contacts/contactsOperations\";\n\nconst initialState = {\n  firstName: \"\",\n  secondName: \"\",\n  email: \"\",\n  number: \"\",\n};\n\nclass AddContact extends Component {\n  state = {\n    firstName: \"\",\n    secondName: \"\",\n    email: \"\",\n    number: \"\",\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = () => {\n    const { firstName, secondName, number } = this.state;\n    const fullName = `${firstName} ${secondName}`;\n    const contact = {\n      name: fullName.replace(/\\b\\w/g, (l) => l.toUpperCase()),\n      number: number,\n    };\n    this.props.addUserContact(contact);\n    this.setState({ ...initialState });\n  };\n\n  render() {\n    const { firstName, secondName, email, number } = this.state;\n    return (\n      <Container>\n        <Accordion>\n          <Card.Header>\n            <Accordion.Toggle\n              as={Button}\n              variant=\"button\"\n              eventKey=\"0\"\n              className=\"btn btn-primary\"\n            >\n              Add contacts\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Header>\n              <Row className=\"justify-content-md-center\">\n                <Col xs lg=\"5\">\n                  <h2 className=\"row row-cols-md-5 justify-content-center\">\n                    Add contacts\n                  </h2>\n                  <Form>\n                    <Form.Row>\n                      <Form.Group as={Col} controlId=\"FirstName\">\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control\n                          type=\"name\"\n                          placeholder=\"First Name\"\n                          name=\"firstName\"\n                          value={firstName}\n                          onChange={this.handleChange}\n                        />\n                      </Form.Group>\n                      <Form.Group as={Col} controlId=\"SecondName\">\n                        <Form.Label>Second Name</Form.Label>\n                        <Form.Control\n                          type=\"name\"\n                          placeholder=\"Second Name\"\n                          name=\"secondName\"\n                          value={secondName}\n                          onChange={this.handleChange}\n                        />\n                      </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                      <Form.Group as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          placeholder=\"Enter email\"\n                          name=\"email\"\n                          value={email}\n                          onChange={this.handleChange}\n                        />\n                      </Form.Group>\n                      <Form.Group as={Col} controlId=\"formGridNumber\">\n                        <Form.Label>Number</Form.Label>\n                        <Form.Control\n                          type=\"Number\"\n                          placeholder=\"Number\"\n                          name=\"number\"\n                          value={number}\n                          onChange={this.handleChange}\n                        />\n                      </Form.Group>\n                    </Form.Row>\n                    <Button\n                      variant=\"primary\"\n                      type=\"button\"\n                      onClick={this.handleSubmit}\n                    >\n                      Add contacts\n                    </Button>\n                  </Form>\n                </Col>\n              </Row>\n            </Card.Header>\n          </Accordion.Collapse>\n        </Accordion>\n      </Container>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addUserContact,\n};\n\nexport default connect(null, mapDispatchToProps)(AddContact);","import React from \"react\";\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  Accordion,\n  Card,\n  InputGroup,\n  FormControl,\n} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { connect } from \"react-redux\";\nimport { getFilterValue } from \"../../redux/contacts/contactsActions\";\n\nfunction FindContact({ getFilterValue }) {\n  return (\n    <Container>\n      <Accordion>\n        <Card.Header>\n          <Accordion.Toggle\n            as={Button}\n            variant=\"button\"\n            eventKey=\"0\"\n            className=\"btn btn-primary\"\n          >\n            Find contacts\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Header>\n            <Row className=\"justify-content-md-center\">\n              <Col xs lg=\"5\">\n                <h2 className=\"row row-cols-md-5 justify-content-center\">\n                  Find contacts\n                </h2>\n                <InputGroup className=\"mb-3\">\n                  <FormControl\n                    placeholder=\"Start enter username\"\n                    aria-label=\"Start enter username\"\n                    aria-describedby=\"basic-addon2\"\n                    onChange={(e) => getFilterValue(e.target.value)}\n                  />\n                </InputGroup>\n              </Col>\n            </Row>\n          </Card.Header>\n        </Accordion.Collapse>\n      </Accordion>\n    </Container>\n  );\n}\n\nconst mapDispatchToProps = {\n  getFilterValue,\n};\n\nexport default connect(null, mapDispatchToProps)(FindContact);","import React, { Component } from \"react\";\nimport { CardGroup } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ContactListItem from \"./ContactListItem\";\nimport AddContact from \"./AddContact\";\nimport FindContact from \"./FindContact\";\nimport { connect } from \"react-redux\";\nimport {\n  getUserContacts,\n  getUserToken,\n  getContactsFilter,\n  getUserInfo,\n} from \"../../redux/contacts/contactsSelectors\";\nimport { getContacts } from \"../../redux/contacts/contactsOperations\";\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.getContacts(this.props.token);\n  }\n\n  filteredContact = (contacts, filter) => {\n    if (filter.length !== 0) {\n      return contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  render() {\n    const { contacts, filter } = this.props;\n    const filteredContacts = this.filteredContact(contacts, filter);\n    return (\n      <>\n        <br />\n        <AddContact />\n        <FindContact />\n        <br />\n        <h2 className=\"row row-cols-5 justify-content-center\">Contacts list</h2>\n        {filteredContacts.length !== 0 && (\n          <CardGroup className=\"row row-cols-md-5 justify-content-center\">\n            {filteredContacts.map((contact) => (\n              <ContactListItem contact={contact} key={contact.id} />\n            ))}\n          </CardGroup>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: getUserInfo(state),\n  contacts: getUserContacts(state),\n  token: getUserToken(state),\n  filter: getContactsFilter(state),\n});\n\nconst mapDispatchToProps = {\n  getContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n"],"names":["_jsx","Avatar","name","size","round","textSizeRatio","style","width","height","mapDispatchToProps","removeContact","connect","_ref","contact","_jsxs","Card","className","border","margin","flex","children","Avatars","number","Button","variant","type","id","onClick","e","target","initialState","firstName","secondName","email","AddContact","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","handleChange","_ref$target","value","setState","_defineProperty","handleSubmit","_this$state","replace","l","toUpperCase","props","addUserContact","_objectSpread","_createClass","key","_this$state2","this","Container","Accordion","as","eventKey","Row","Col","xs","lg","Form","controlId","placeholder","onChange","Component","getFilterValue","InputGroup","FormControl","ContactList","filteredContact","contacts","filter","toLowerCase","includes","getContacts","token","_this$props","filteredContacts","_Fragment","FindContact","CardGroup","map","ContactListItem","user","getUserInfo","getUserContacts","getUserToken","getContactsFilter"],"sourceRoot":""}